% ---------------------------------------------
% GET DATA
% ---------------------------------------------
close all, clear all, clc;
addpath('.\swa_data');
addpath .\imm3897

[meta, cfg] = extract_data(@data_20121029_localize_baseline, 1:34);
% load simdata1_multipath; % Multipath data 
load simdata1;           % Ideal data 
load simdata2_predict;   % Data to predict (same as ideal data right now)

method='mli';
tau    = 0.45;

M  = 200;
% k = (2:2:1000).'; % Wavenumbers for dispersion curves
k = linspace(2, 1000, 500).';
% ---------------------------------------------
% OPTIONS
% ---------------------------------------------
fn = 10:1000; % 1M first
dF = 1e3;
F1 = 1000e3;  % Maximum frequency [Hz]
F0 = 10e3; % Minimum frequency [Hz]   

% SPARSE WAVENUMBER ANALYSIS OPTIONS
optMatrix    = false;    % Solve the basis pursuit for all frequencies at once
optNomalized = false;   % Use distortionless constraint
% iterPlot     = false;    % Plot result at each frequency
iterPlot     = true; % true this time
%%
% ---------------------------------------------
% GET DISPERSION CURVES
% ---------------------------------------------
% GET ALL SENSORS AND TRANSMITTER USED 
%   (FOR PLOTTING LATER)
Rx = Rx(:); 
% Tx = Tx(:);
RxSize = cell2mat(cellfun(@size, Rx, 'UniformOutput', false));
for ii = 2:size(RxSize,1), RxSize(ii,:) = RxSize(ii,:) + RxSize(ii-1,:); end
TM = sum(RxSize(:,1) < M)+1;
Rx0 = cell2mat(Rx); Rx0 = Rx0(1:M,:);
Tx0 = cell2mat(Tx(1:TM));

% ROUND FREQUENCY INFOMRATION TO FIT DATA
% 此处不知Q如何设置
Q = size(cell2mat(x),1); 
r = floor(Q/2)+1; f = ifftshift((((1:Q)-r)/Q))*Fs;
[F1x F1n] = min(abs(f-F1)); [F0x F0n] = min(abs(f-F0));
dFn = round(dF/Fs*Q);

% SET DOMAINS
fn = (F0n:dFn:F1n).';          % Frequency index space
t = 1/Fs:1/Fs:Q/Fs;            % Time space

% COMPUTE DISTANCES BETWEEN SENSORS
% dp = (dist2(cell2mat(Rxp), cell2mat(Txp.').'));
dp = cell2mat(arrayfun(@(ii) dist(Rxp{ii}, Txp{ii}.'), 1:length(Rxp), 'UniformOutput', false).');  % Rxp ?? Txp ??
% dp = dp(1:M);

% COMPUTE FOURIER TRANSFORM OF DATA
xp = cell2mat(xp);
% xp(1:110,:) = 0;
% xp = velwindow(xp, dp, 2000/meta.Fs);
Xp = fft(xp);        % Fourier transform of data to predict

%% 
Tx2 = arrayfun(@(ii) (meta.Tx{ii}.'*ones(1,size(meta.Rx{ii},1))).', 1:numel(meta.Rx), 'UniformOutput', false);
%d = diag(dist2(cell2mat(meta.Rx), cell2mat(Tx.').'));
d = (dist2(cell2mat(meta.Rx), cell2mat(Tx2.').'));
% d  = d(1:M, :); 

x = cell2mat(meta.x.');
x(1:110,:) = 0; % Remove cross-talk
x = velwindow(x, d, 2000/meta.Fs);
X = fft(x);                    % Fourier transform of measured data 
% X  = X(:,1:M);

%V = swa( k, d, X(200:800,:), .4, 'method', 'bp', 'plot', true );
% V = swa( k, d, X(fn,:), 2, 'method', 'omp' );
%% SWA
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PERFORM SPARSE WAVENUMBER ANALYSIS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%此处sparse error: Sparse matrix sizes must be non-negative integers less than MAXSIZE as defined by COMPUTER.
V = sparse(500, Q);

    V(:,fn) =  swa_mli_v2( k, d, X(fn,:), tau, 'optMatrix', optMatrix, 'optNomalized', optNomalized, 'plot', iterPlot, 'method', method);

%%
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PERFORM SPARSE WAVENUMBER DENOISING
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
y = 2*real(sws_mli_v1( k, d, V ));
% save swsMli y;
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PERFORM SPARSE WAVENUMBER SYNTHESIS (PREDICTION)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
z = 2*real(sws_mli_v1( k, dp, V ));
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PROCESS MEASURED DATA FOR COMPARISON
%   These lines apply a window to the frequency domain of each 
%   measurement so that we observe the same frequencies as used by 
%   sparse wavenumber analysis
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Xc  = zeros(size(X));
Xpc = zeros(size(Xp));
Xc(F0n:dFn:F1n,:)  = X(F0n:dFn:F1n,:);  xc = 2*real(ifft(Xc));
Xpc(F0n:dFn:F1n,:) = Xp(F0n:dFn:F1n,:); xpc = 2*real(ifft(Xpc));
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% COMPUTE CORRELATION COEFFICIENTS BETWEEN SIGNALS
% GENERATED BY SWS AND TRUE SIGNALS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ccd = arrayfun(@(i) y(:,i)'*xc(:,i)/norm(y(:,i))/norm(xc(:,i)), 1:size(y,2));
ccs = arrayfun(@(i) z(:,i)'*xpc(:,i)/norm(z(:,i))/norm(xpc(:,i)), 1:size(z,2));
% ---------------------------------------------
% PLOT
% ---------------------------------------------
fprintf('-----------------------------------------------------\n')
fprintf('Denoising results \n')
fprintf('  Average correlation coefficient (/w true result): %f \n', mean(ccd))
fprintf('Prediction results \n')
fprintf('  Average correlation coefficient (/w true result): %f \n', mean(ccs))
fprintf('-----------------------------------------------------\n\n')

figure(1)
N = meta.N; Fs = meta.Fs; t = 1/Fs:1/Fs:N/Fs;
plot(t, x)
xlabel('Time')
ylabel('Voltage')

% PLOT FREQUENCY-WAVENUMBER REPRESENTATION
figure(2)
f = linspace(0, Fs, N);
imagesc(f(fn)/1000, k, 10*log10(abs(V)/max(max(abs(V)))), [-25 0])
axis xy;
ylabel('Wavenumber')
xlabel('Frequency [kHz]')
colormap(fireprint)
a = colorbar;
xlabel(a, '[dB]')

% PLOT SENSOR LOCATIONS
figure(3)
plot(Rx0(:,1), Rx0(:,2), 'LineStyle', 'none', 'MarkerSize', 10, 'Marker', 's', 'color', [37   64  97]/255);
hold on; plot( Tx0(:,1), Tx0(:,2), 'd', 'linewidth', 4, 'MarkerSize', 4, 'color', [99   37  35]/255); hold off;
axis([0 1.22 0 1.22])
legend('Sensors', 'Transmitters','Location','Best')
xlabel('Plate width [m]')
ylabel('Plate length [m]')

% PLOT SPARSE WAVENUMBER DENOISING RESULTS
figure(4)
subplot(211); plot(t*1000, y(:,2));
text(max(get(gca, 'xlim'))*.975, max(get(gca, 'ylim')*.875), 'Sparse wavenumber denoised signal', 'HorizontalAlignment', 'right', 'VerticalAlignment', 'top')
xlabel('Time [ms]'); ylabel('Amplitude')
subplot(212); plot(t*1000, xc(:,2));
text(max(get(gca, 'xlim'))*.975, max(get(gca, 'ylim')*.875), 'True signal without multipath', 'HorizontalAlignment', 'right', 'VerticalAlignment', 'top')
xlabel('Time [ms]'); ylabel('Amplitude')

% PLOT SPARSE WAVENUMBER SYNTHESIS RESULTS
figure(5)
subplot(211); plot(t*1000, z(:,2)); 
text(max(get(gca, 'xlim'))*.975, max(get(gca, 'ylim')*.875), 'Sparse wavenumber synthesis predicted signal', 'HorizontalAlignment', 'right', 'VerticalAlignment', 'top')
xlabel('Time [ms]'); ylabel('Amplitude');
subplot(212); plot(t*1000, xpc(:,2));
text(max(get(gca, 'xlim'))*.975, max(get(gca, 'ylim')*.875), 'True signal', 'HorizontalAlignment', 'right', 'VerticalAlignment', 'top')
xlabel('Time [ms]'); ylabel('Amplitude');

% PLOT CORRELATION COEFFICIENTS
figure(6)
subplot(211); plot([1:length(ccd)].', ccd, 'linewidth', 2); 
title('Correlation coefficients between true and denoised signals')
xlabel('Measurement Number [no order]'); ylabel('Correlation Coefficient');
subplot(212); plot([1:length(ccs)].', ccs, 'linewidth', 2);
title('Correlation coefficients between true and predicted signals')
xlabel('Measurement Number [no order]'); ylabel('Correlation Coefficient');

