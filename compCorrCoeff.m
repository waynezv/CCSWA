
% PERFORM SPARSE WAVENUMBER DENOISING
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function [Ori, Mli] = compCorrCoeff()
% load data
load swsOri, load swsMli
swsOri = z; swsMli = y;
[meta, cfg] = extract_data(@data_20121029_localize_baseline, 1:34);
x = cell2mat(meta.x.');
X = fft(x);

y = 2*real(swsMli);
y = y(1:991, :);
% save y y;
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PERFORM SPARSE WAVENUMBER SYNTHESIS (PREDICTION)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
z = 2*real(swsOri);
% save z z;
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% PROCESS MEASURED DATA FOR COMPARISON
%   These lines apply a window to the frequency domain of each 
%   measurement so that we observe the same frequencies as used by 
%   sparse wavenumber analysis
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Xc  = zeros(size(X));
Xc(10:1:1000,:)  = X(10:1:1000,:);  xc = 2*real(ifft(Xc));
xc = xc(1:991, :);
% save xc xc;
% COMPUTE CORRELATION COEFFICIENTS BETWEEN SIGNALS
% GENERATED BY SWS AND TRUE SIGNALS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ccd = arrayfun(@(i) y(:,i)'*xc(:,i)/norm(y(:,i))/norm(xc(:,i)), 1:size(y,2));
ccs = arrayfun(@(i) z(:,i)'*xc(:,i)/norm(z(:,i))/norm(xc(:,i)), 1:size(z,2));
% save ccd ccd;
% save ccs ccs;
% ---------------------------------------------
fprintf('-----------------------------------------------------\n')
fprintf('Denoising results \n')
fprintf('  Average correlation coefficient (/w true result): %f \n', mean(ccd))
fprintf('Prediction results \n')
fprintf('  Average correlation coefficient (/w true result): %f \n', mean(ccs))
fprintf('-----------------------------------------------------\n\n')